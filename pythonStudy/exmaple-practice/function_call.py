# 실습 설명
# 원활한 실습을 위해 함수에 대한 내용을 가볍게 짚고 넘어가겠습니다.
#
# 아래 함수에 대한 내용을 읽어보신 후, 실습 결과와 동일하게 출력하는 함수를 작성하고 호출해 보세요.
#
# 기본적인 함수 구조는 아래와 같아요.
#
#
# # 함수 정의
# def 함수명():
#     함수 호출 시 실행되는 코드
#
# # 함수 호출
# 함수명()
# 호출 시 인수를 함수 내에서 사용하고 싶다면 파라미터와 함께 함수를 정의할 수 있어요.
#
#
# # 함수 정의
# def 함수명(파라미터):
#     함수 호출 시 실행되는 코드
#
# # 함수 호출
# 함수명(인수)
# 아래 내용은 함수를 만들 때 자주 실수하시는 부분이니 주의해 주세요.
#
# 함수를 호출하기 전에 함수를 정의해 주세요.
#
# # 잘못된 순서
# 함수명()
#
# def 함수명():
#     함수 호출 시 실행되는 코드
# 함수 정의는 def 함수명(): 으로 시작합니다.
#
# # 잘못된 함수 정의
# def hello()
#
# # 올바른 함수 정의
# def hello():
# 함수 호출 시 실행되는 코드는 함수 정의를 한 라인의 다음 줄부터 들여 쓰기를 하여 작성해 주세요. 4칸이 통용되는 규칙이니 4칸을 쓰시는 것을 권장합니다.
#
# # 실행은 되지만 권장되지 않는 들여 쓰기 단계
# def hello():
#   print("hello")
#
# hello()
# 함수 호출 후 실행할 코드는 함수 내부에 작성하고, 정의한 함수와 동일한 함수 호출은 기본적으로 함수 외부에서 호출합니다. 들여 쓰기로 함수의 내부와 외부가 구분돼요.
#
# def hello():
#     # 함수 내부
#     print("hello")
#
# # 함수 외부
# hello()
# 함수 호출은 선언한 함수명에 ()을 붙여줘요. 대소문자를 구분하니 주의해 주세요.
#
# # 잘못된 함수 호출
# def hello():
#     print("안녕")
#
# Hello()
# 실습 결과
#
# 시작은 언제나 오늘이다.

# 나의 문제 해결
def quotes():
    print("시작은 언제나 오늘이다.")


quotes()


# 실습 설명
# 실행기의 # 테스트 코드 함수 호출 부분을 참고하여 아래 조건을 만족하는 함수를 작성해 보세요.
#
# 함수 호출 시 두 수가 주어졌을 때 나머지 연산을 한 결과를 출력합니다.
# 나머지 연산자(%)를 활용합니다.
def calculate_remainder(first_num, second_num):
    result = first_num % second_num
    print(result)


calculate_remainder(15, 4)


# 해설
# # 테스트 코드 함수 호출 부분을 참고하여 함수명을 동일하게 정의해 줄게요.
#
#
# def calculate_remainder():
# 함수 호출 시 두 수가 인수로 주어지기 때문에 두 수를 함수 내에서 활용하기 위해 파라미터도 두 개가 필요해요.
#
#
# def calculate_remainder(a, b):
# 실습 설명에 따라 함수에서 나머지 연산자를 활용하여 나머지 연산을 한 결과를 출력해야 합니다.
#
# a, b 두 수가 주어졌을 때 나머지 연산을 출력하는 코드는 아래와 같이 작성할 수 있어요.
#
#
# print(a % b)
# 함수를 호출을 했을 때 위 코드가 실행되어야 하므로 함수 내부, 즉 들여 쓰기를 4칸 하여 작성해 줍니다.
#
#
# def calculate_remainder(a, b):
#     print(a % b)
# 완성된 코드는 아래와 같습니다.
#
# 모범 답안
#
# def calculate_remainder(a, b):
#     print(a % b)
#
#
# # 테스트 코드
# calculate_remainder(15, 4)


# 실습 설명
# 1년은 보통 365일입니다. 그런데 드물게 2024년과 같이 366일인 해가 있는데, 이를 윤년이라고 합니다.
#
# 윤년의 판단 기준은 아래와 같습니다.
#
# 4로 나누어 떨어지는 해는 윤년으로 한다.
# 4로 나누어 떨어지고, 100으로도 나누어 떨어지는 해는 윤년이 아니다.
# 4, 100, 400으로 모두 나누어 떨어지는 해는 윤년으로 둔다.
# 이 실습에서는 첫 번째 기준인,
#
# 4로 나누어 떨어지는 해
#
# 를 판단할 수 있는 코드를 구현해 볼 거예요. 2,3 번째 기준도 함께 고려한 코드는 뒤에 있는 실습에서 다뤄보겠습니다.
#
# # 테스트 코드를 참고하여 특정 연도를 인수로 넣었을 때 첫 번째 기준을 만족하는지 출력 결과로 확인할 수 있는 함수를 작성해 보세요.
#
# 작성한 함수에 의해 출력되는 나머지 값에 따라 윤년 여부를 확인할 수 있는데요,
#
# 1번 기준에 의해 윤년이라면 0을 출력할 것이고
# 윤년이 아니라면 1부터 3까지의 수를 출력할 것입니다.
# 실습 결과
#
# 1

# 나의 문제 해결
def is_leap_year(year):
    result = year % 4
    print(result)


is_leap_year(2029)


# 해설
# 인수가 주어져 있기 때문에 호출하는 함수명과 동일하게 파라미터(year)가 있는 함수를 정의해 주면 돼요.
#
#
# def is_leap_year(year):
# 4로 나누어 떨어지는지 확인을 해야 하니 나머지 연산자(%)를 쓰겠습니다.
#
#
# def is_leap_year(year):
#     print(year % 4)
# 모범 답안
#
# def is_leap_year(year):
#     print(year % 4)
#
# is_leap_year(2029)


# 나의 문제 해결
def convert_minutes(minutes):
    print(minutes // 60)
    print(minutes % 60)


convert_minutes(130)


# 해설
# 일상에서 분 단위로 주어진 시간을 시간과 분으로 환산할 때는 머릿속으로 60으로 나눠서 몫과 나머지를 구합니다.
# 동일하게 컴퓨터가 이 연산을 할 수 있도록 적절한 연산자를 활용하여 순서대로 명령을 내리면 돼요.
#
# 주어진 130분을 시간과 분으로 환산해 볼게요.
#
# 먼저 시간을 구하기 위해서는 Floor Divison(버림 나눗셈)을 활용합니다.
#
#
# print(130 // 60)    # 2
# 분을 구하기 위해서는 60으로 나눈 나머지를 이용하면 됩니다.
#
#
# print(130 % 60)    # 10
# 이제 # 테스트 코드를 참고하여 적절한 파라미터와 함께 함수를 정의해 줍니다.
#
#
# def convert_minutes(minutes):
#     print(minutes // 60)
#     print(minutes % 60)
# 위와 같이 작성하셔도 되지만 60이라는 수가 반복되니 변수를 활용해 볼 수도 있어요.
#
# 모범 답안
#
# def convert_minutes(minutes):
#     minutes_per_hour = 60
#     print(minutes // minutes_per_hour)
#     print(minutes % minutes_per_hour)
#
#
# # 테스트 코드
# convert_minutes(130)


# 실습 설명
# 민재는 초등학교 동창 모임의 총무를 맡고 있습니다. 매 번 친구들과 모임을 가질 때마다 정산을 하는 게 번거로워서 이를 계산해 주는 프로그램을 만드려고 해요.
#
# 저번 모임에는 총 110000원이 나왔고 6명이 참가했습니다. # 테스트 코드를 참고하여 총금액과 몇 명이 함께 했는지를 입력하면 각자 최대한 균등하게 내기 위해 얼마를 내야 하는지 출력해 주는 함수를 만들어 보세요.
#
# 출력되는 결과는 정수여야 합니다. 소수점은 반올림하여 정수로 만들어 주세요.
# 강의에서 배운 연산자를 활용하여 작성해 주세요.
# 실습 결과
#
# 18333

# 나의 문제 해결
def split_bill(money, people):
    bill_per_one = int(money / people)
    print(bill_per_one)


split_bill(110000, 6)


# 해설
# # 테스트 코드를 보면 금액(110000)과 인원 수(6), 총 두 개의 인수가 주어졌습니다. 그러므로 함수 정의 시 파라미터도 동일하게 두 개가 필요합니다.
#
#
# def split_bill(total, n):
# 각자 얼마씩 내야 하는지를 알기 위해선 총금액(total)을 인원수(n)로 나눌게요.
#
#
# print(total / n)    # 18333.333...
# 그런데, 실습 조건에서 결과는 정수여야 하고 소수점 이하는 반올림한다고 하였으므로 round()를 사용합니다.
# round() 를 호출할 때는 하나 또는 두 개의 인수가 올 수 있어요.
#
#
# round(숫자, 자릿수)
# 하나의 인수만 쓰게 된다면 인수에 쓰인 숫자와 가장 가까운 정수를 반환해요.
#
#
# print(round(123.456))    # 123
# 두 개의 인수를 쓴다면 두 번째 인수가 가리키는 소수점 아래 자릿수까지 반올림 한 값을 반환해요.
#
#
# print(round(123.456, 1)) # 123.5
# 우리가 필요한 건 정수이므로 하나의 인수만 쓰면 됩니다.
#
# 참고로 나눗셈한 결과에서 소수점 이하를 버린다면 // 연산자를 쓸 수도 있어요.
# 뒤에서 배우 실 텐데 int()라는 함수 역시 소수점 이하를 제거하게 되니 참고해 주세요.
#
#
# print(total // n)    # 18333
# // 연산자를 써도 결과는 같지만, 과제 조건대로 round()를 쓰면 다음과 같아요.
#
#
# def split_bill(total, n):
#     share = total / n
#     print(round(share))

# 모범 답안
#
# def split_bill(total, n):
#     share = total / n
#     print(round(share))
#
#
# # 테스트 코드
# split_bill(110000, 6)

# # 테스트 코드를 실행했을 때 아래 실습 결과와 동일하게 출력되도록 함수를 정의해 보세요.
#
# 함수에 주어진 인수들을 어떻게 실습 결과와 동일하게 만들지 생각해 보세요.
#
# 실습 결과
#
# 486
# 24!

# 나의 문제 해결
def concatenate_strings(first, second, third):
    result = first + second + third
    print(result)


concatenate_strings("4", "8", "6")
concatenate_strings("2", "4", "!")


# 해설
# 이 과제에서 이해해야 할 핵심은 따옴표로 감싼 값은 문자열이라는 것이에요.
#
# 아래 코드를 실행한다면 "코드잇"이 출력될까요?
#
#
# name = "코드잇"
#
# print("name")
# 아니에요. "name"과 같이 따옴표로 감싸져 있기 때문에 name 변수에 할당된 문자열인 "코드잇"이 출력되지 않고, "name"이라는 문자열이 출력됩니다.
#
#
# a = 1
# b = "1"
# c = 2
# d = "2"
#
# print(a + c)    # 3
# print(b + d)    # 12
# a 와 c에 할당된 값은 숫자이지만, b 와 d에 할당된 값은 문자열이에요.
#
# 그래서 숫자끼리는 + 연산이 더하는 용도로 쓰이지만, 문자열끼리는 문자열과 문자열을 연결해 주는 역할을 해요.
#
# 실습 결과를 보면 주어진 인수들이 다 연결된 형태를 띠고 있어요. 그러므로 + 연산을 활용하여 아래와 같이 함수를 작성할 수 있어요.
#
#
# def concatenate_strings(a, b, c):
#     print(a + b + c)
# 모범 답안
#
# def concatenate_strings(a, b, c):
#     print(a + b + c)
#
#
# # 테스트 코드
# concatenate_strings("4", "8", "6")
# concatenate_strings("2", "4", "!")


# 실습 설명
# 이번 실습에서는 공백 문자열(" ")을 활용해 볼게요.
#
# 공백 문자열이란 " "와 같이 스페이스 키 등을 통해 공백 문자를 포함하는 문자열을 의미합니다.
#
# 공백 문자열은 빈 문자열("")과 구분돼요. 빈 문자열은 비어있는 상태이기 때문에 어떤 문자열과 더하더라도 더하기 이전과 같은 값을 반환해요.
#
#
# empty_string = ""
#
# print("코" + "딩")                   # "코딩"
# print("코" + empty_string + "딩")    # "코딩"
# print(empty_string + "코" + "딩")    # "코딩"
# 위 내용과 # 테스트 코드에 주어진 함수의 인수를 참고하여 실습 결과와 동일하게 출력하는 함수를 작성해 보세요.
#
# 실습 결과
#
# 아버지가 방에 들어가신다.

# 나의 문제 해결
def concatenate_strings(a, b, c):
    result = a + " " + b + " " + c
    print(result)


concatenate_strings("아버지가", "방에", "들어가신다.")


# 해설
# 만약 함수에 주어진 인수들을 그대로 연결시켜 출력한다면 어떻게 될까요?
#
#
# print("아버지가" + "방에" + "들어가신다")    # 아버지가방에들어가신다
# 위와 같이 이중적인 의미로 해석될 수 있는 문자열이 출력돼요.
# 우리는 의미가 명확하게 전달되도록 각 인수 사이에 공백 문자열을 연결시켜 출력할 수 있도록 작성해 주면 됩니다.
#
#
# def concatenate_strings(a, b, c):
#     print(a + " " + b + " " + c)
# 위와 같이 하셔도 되고, 아래와 같이 변수를 활용해 주셔도 좋아요.
#
#
# def concatenate_strings(a, b, c):
#     whitespace = " "
#
#     print(a + whitespace + b + whitespace + c)
# 이 과제는 공백을 직접 활용해 보는 게 목적이지만, 다음과 같이 작성하더라도 동일한 결과가 나오는데요,
#
#
# def concatenate_strings(a, b, c):
#     print(a, b, c)
# 이는 print() 함수가  comma(,)로 구분된 여러 인수가 주어질 때 인수를 연결하면서 각 인수 사이에 공백(" ")을 포함시키도록 되어 있기 때문이에요. 이 부분도 기억해 주시면 좋을 거예요.
#
#
# print("코", "드", "잇")    # 코 드 잇
# 모범 답안
#
# def concatenate_strings(a, b, c):
#     whitespace = " "
#     print(a + whitespace + b + whitespace + c)
#
# # 테스트 코드
# concatenate_strings("아버지가", "방에", "들어가신다.")

# 실습 설명
# 함수에 주어진 인수를 활용하여 실습 결과와 같이 출력하는 함수를 정의해 보세요.
#
# 예를 들어, 함수의 인수로 숫자 1, 2, 3이 주어지면 문자열 "123"을 출력해야 합니다.
#
# 실습 결과
#
# 241

# 나의 문제 해결
def concatenate_numbers(a, b, c):
    result = str(a) + str(b) + str(c)
    print(result)


concatenate_numbers(2, 4, 1)


# 해설
# 먼저 확인해야 할 것은 주어진 인수의 자료형이에요.
#
# 따옴표로 감싸져 있지 않으니 숫자형입니다. 만약 그대로 세 인수를 + 연산자로 더한다면, 다음과 같은 결과가 나올 거예요.
#
#
# print(2 + 4 + 1)    # 7
# 출력 결과인 241 이 나오게 하기 위해서 세 인수를 연결해주면 돼요.
#
# 연결을 하기 위해서 각 인수를 문자열로 형변환 시키고 + 연산자로 연결을 시키면 되겠죠?
#
#
# print(str(2) + str(4) + str(1))    # 241
# 모범 답안
#
# def concatenate_numbers(a, b, c):
#     print(str(a) + str(b) + str(c))
#
#
# # 테스트 코드
# concatenate_numbers(2, 4, 1)


# 실습 설명
# 사용자의 이름과 나이를 입력받아서 실습 결과와 같이 출력하는 함수를 만드려고 합니다.
#
# 이름이 "재민",  나이가 24(살)이라면 아래와 같이 출력돼야 해요.
#
#
# 제 이름은 재민이고, 24살입니다.
# 아래 조건에 따라 함수를 직접 정의하고 호출하는 코드를 작성해 보세요.
#
# 함수명은 introduce_self로 작성해 보세요
# 호출 시 인수는 "호영", 31 총 두 개를 받습니다.
# format() 메소드를 활용해 주세요.
# 실습 결과
#
# 제 이름은 호영이고, 31살입니다.

# 나의 문제 해결
def name_age(name, age):
    print(f"제 이름은 {name}이고, {age}살입니다.")


name_age("호영", 31)


# 해설
# 호출하는 함수명과 함수 정의 시 사용되는 함수명은 대소문자까지 일치해야 해요. 그러므로 다음과 같은 형태가 될 거예요.
#
#
# # 함수 정의
# def introduce_self():
#     # 함수 호출시 실행될 코드
#     ....
#
#
# # 함수 호출
# introduce_self()
# 이름("호영")과 나이(31), 두 개의 인수를 받으니 함수 정의 부분과 호출 부분을 아래와 같이 작성할 수 있어요.
#
# 파라미터명은 name 과 age 로 정할게요.
#
# 그럼 인수로 주어진 "호영"과 31이 각각 name 과 age 에 할당되어 함수 내에서 파라미터를 통해 인수로 주어진 값을 활용할 수 있어요.
#
#
# def introduce_self(name, age):
#     ....
#
#
# introduce_self("호영", 31)
# 이제 출력을 위해 format() 메소드를 활용해 볼게요.
#
# format()메소드의 기본 형태는 다음과 같아요.
#
#
# "{}".format()
# format() 메소드의 인수가 출력 시 {} 위치에 나타나게 돼요. 여러 개의 인수가 주어진다면 기본적으로 인수 순서대로 {} 에 나타납니다.
#
#
# print("{} {} {}".format(3, 1, 2))    # 3 1 2
# 인수로 이름과 나이가 주어지므로, 문자열에서 이름과 나이가 나타날 부분을 {}로 변경해 주면 돼요.
#
#
# # 제 이름은 호영이고, 31살입니다.
# "제 이름은 {}이고, {}살입니다.".format(name, age)
# 위 내용들을 반영하면 다음과 같이 함수를 작성할 수 있어요.
#
#
# def introuduce_self(name, age):
#     print("제 이름은 {}이고, {}살입니다.".format(name, age))
# 모범 답안
#
# def introduce_self(name, age):
#     print("제 이름은 {}이고, {}살입니다.".format(name, age))
#
#
# introduce_self("호영", 31)