# 실습 설명
# 원활한 실습을 위해 함수에 대한 내용을 가볍게 짚고 넘어가겠습니다.
#
# 아래 함수에 대한 내용을 읽어보신 후, 실습 결과와 동일하게 출력하는 함수를 작성하고 호출해 보세요.
#
# 기본적인 함수 구조는 아래와 같아요.
#
#
# # 함수 정의
# def 함수명():
#     함수 호출 시 실행되는 코드
#
# # 함수 호출
# 함수명()
# 호출 시 인수를 함수 내에서 사용하고 싶다면 파라미터와 함께 함수를 정의할 수 있어요.
#
#
# # 함수 정의
# def 함수명(파라미터):
#     함수 호출 시 실행되는 코드
#
# # 함수 호출
# 함수명(인수)
# 아래 내용은 함수를 만들 때 자주 실수하시는 부분이니 주의해 주세요.
#
# 함수를 호출하기 전에 함수를 정의해 주세요.
#
# # 잘못된 순서
# 함수명()
#
# def 함수명():
#     함수 호출 시 실행되는 코드
# 함수 정의는 def 함수명(): 으로 시작합니다.
#
# # 잘못된 함수 정의
# def hello()
#
# # 올바른 함수 정의
# def hello():
# 함수 호출 시 실행되는 코드는 함수 정의를 한 라인의 다음 줄부터 들여 쓰기를 하여 작성해 주세요. 4칸이 통용되는 규칙이니 4칸을 쓰시는 것을 권장합니다.
#
# # 실행은 되지만 권장되지 않는 들여 쓰기 단계
# def hello():
#   print("hello")
#
# hello()
# 함수 호출 후 실행할 코드는 함수 내부에 작성하고, 정의한 함수와 동일한 함수 호출은 기본적으로 함수 외부에서 호출합니다. 들여 쓰기로 함수의 내부와 외부가 구분돼요.
#
# def hello():
#     # 함수 내부
#     print("hello")
#
# # 함수 외부
# hello()
# 함수 호출은 선언한 함수명에 ()을 붙여줘요. 대소문자를 구분하니 주의해 주세요.
#
# # 잘못된 함수 호출
# def hello():
#     print("안녕")
#
# Hello()
# 실습 결과
#
# 시작은 언제나 오늘이다.

# 나의 문제 해결
def quotes():
    print("시작은 언제나 오늘이다.")


quotes()




# 실습 설명
# 실행기의 # 테스트 코드 함수 호출 부분을 참고하여 아래 조건을 만족하는 함수를 작성해 보세요.
#
# 함수 호출 시 두 수가 주어졌을 때 나머지 연산을 한 결과를 출력합니다.
# 나머지 연산자(%)를 활용합니다.
def calculate_remainder(first_num, second_num):
    result = first_num % second_num
    print(result)


calculate_remainder(15, 4)


# 해설
# # 테스트 코드 함수 호출 부분을 참고하여 함수명을 동일하게 정의해 줄게요.
#
#
# def calculate_remainder():
# 함수 호출 시 두 수가 인수로 주어지기 때문에 두 수를 함수 내에서 활용하기 위해 파라미터도 두 개가 필요해요.
#
#
# def calculate_remainder(a, b):
# 실습 설명에 따라 함수에서 나머지 연산자를 활용하여 나머지 연산을 한 결과를 출력해야 합니다.
#
# a, b 두 수가 주어졌을 때 나머지 연산을 출력하는 코드는 아래와 같이 작성할 수 있어요.
#
#
# print(a % b)
# 함수를 호출을 했을 때 위 코드가 실행되어야 하므로 함수 내부, 즉 들여 쓰기를 4칸 하여 작성해 줍니다.
#
#
# def calculate_remainder(a, b):
#     print(a % b)
# 완성된 코드는 아래와 같습니다.
#
# 모범 답안
#
# def calculate_remainder(a, b):
#     print(a % b)
#
#
# # 테스트 코드
# calculate_remainder(15, 4)


# 실습 설명
# 1년은 보통 365일입니다. 그런데 드물게 2024년과 같이 366일인 해가 있는데, 이를 윤년이라고 합니다.
#
# 윤년의 판단 기준은 아래와 같습니다.
#
# 4로 나누어 떨어지는 해는 윤년으로 한다.
# 4로 나누어 떨어지고, 100으로도 나누어 떨어지는 해는 윤년이 아니다.
# 4, 100, 400으로 모두 나누어 떨어지는 해는 윤년으로 둔다.
# 이 실습에서는 첫 번째 기준인,
#
# 4로 나누어 떨어지는 해
#
# 를 판단할 수 있는 코드를 구현해 볼 거예요. 2,3 번째 기준도 함께 고려한 코드는 뒤에 있는 실습에서 다뤄보겠습니다.
#
# # 테스트 코드를 참고하여 특정 연도를 인수로 넣었을 때 첫 번째 기준을 만족하는지 출력 결과로 확인할 수 있는 함수를 작성해 보세요.
#
# 작성한 함수에 의해 출력되는 나머지 값에 따라 윤년 여부를 확인할 수 있는데요,
#
# 1번 기준에 의해 윤년이라면 0을 출력할 것이고
# 윤년이 아니라면 1부터 3까지의 수를 출력할 것입니다.
# 실습 결과
#
# 1

# 나의 문제 해결
def is_leap_year(year):
    result = year % 4
    print(result)


is_leap_year(2029)

# 해설
# 인수가 주어져 있기 때문에 호출하는 함수명과 동일하게 파라미터(year)가 있는 함수를 정의해 주면 돼요.
#
#
# def is_leap_year(year):
# 4로 나누어 떨어지는지 확인을 해야 하니 나머지 연산자(%)를 쓰겠습니다.
#
#
# def is_leap_year(year):
#     print(year % 4)
# 모범 답안
#
# def is_leap_year(year):
#     print(year % 4)
#
# is_leap_year(2029)


# 나의 문제 해결
def convert_minutes(minutes):
    print(minutes // 60)
    print(minutes % 60)

convert_minutes(130)


# 해설
# 일상에서 분 단위로 주어진 시간을 시간과 분으로 환산할 때는 머릿속으로 60으로 나눠서 몫과 나머지를 구합니다.
# 동일하게 컴퓨터가 이 연산을 할 수 있도록 적절한 연산자를 활용하여 순서대로 명령을 내리면 돼요.
#
# 주어진 130분을 시간과 분으로 환산해 볼게요.
#
# 먼저 시간을 구하기 위해서는 Floor Divison(버림 나눗셈)을 활용합니다.
#
#
# print(130 // 60)    # 2
# 분을 구하기 위해서는 60으로 나눈 나머지를 이용하면 됩니다.
#
#
# print(130 % 60)    # 10
# 이제 # 테스트 코드를 참고하여 적절한 파라미터와 함께 함수를 정의해 줍니다.
#
#
# def convert_minutes(minutes):
#     print(minutes // 60)
#     print(minutes % 60)
# 위와 같이 작성하셔도 되지만 60이라는 수가 반복되니 변수를 활용해 볼 수도 있어요.
#
# 모범 답안
#
# def convert_minutes(minutes):
#     minutes_per_hour = 60
#     print(minutes // minutes_per_hour)
#     print(minutes % minutes_per_hour)
#
#
# # 테스트 코드
# convert_minutes(130)