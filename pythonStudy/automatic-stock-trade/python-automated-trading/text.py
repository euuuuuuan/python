# 실습 설명
# 이번 프로젝트에서는 주식 자동 매매 코드를 작성해 볼 겁니다. 한국투자증권에서 모의 투자 계좌를 만들고 API를 사용해 볼 건데요. 아래 요구 사항에 맞게 파이썬 코드를 완성해 주세요. 모의 투자에서는 조금 손해를 보는 것도 괜찮으니까 직접 코드를 작성하면서 자유롭게 테스트해 보시길 바랍니다. 어떻게 해야 할지 막막하다면 아래 가이드라인을 참고해서 만들어 보세요.
#
# 요구 사항
# 준비하기
# 한국투자증권에서 모의 투자 계좌를 만들고 개발자 등록을 한 후 진행해 주세요.
# API 문서를 참고해 리퀘스트를 보내는 코드를 작성해 주세요.
# 프로젝트에 필요한 선수 지식에 대해서는 이전 챕터 내용을 자유롭게 참고하시면 됩니다.
# 컴퓨터에 PyCharm을 설치하고 파이썬 프로젝트를 생성해서 진행해 주세요.
# 다음을 참고해서 requests라는 이름의 모듈을 설치해서 사용해 주세요.
# [PyCharm으로 외부 패키지 설치하기(Windows)]
# [PyCharm으로 외부 패키지 설치하기(macOS)]
# 매매 전략
# 1분 봉을 기준으로 코드를 작성해 주세요.
# 앞에서 소개된 이동 평균선 매매 전략을 사용합니다.
# 이동 평균선은 20분, 60분을 사용합니다.
# 골든 크로스일 때 전량 매수합니다.
# 데드 크로스일 때 전량 매도합니다.
# 파일 구조
# PyCharm에서 프로젝트를 생성하고 진행합니다.
# 필요하다면 자유롭게 파일을 더 만들어도 되지만, 최소한 백테스트를 하는 파일인
# backtest.py와 백테스트에 쓰는 데이터인 sample.json
# 그리고 실제 자동 매매를 구현한 main.py 파일을 만들어 주세요.
# 참고로 .venv/ 폴더는 PyCharm에서 자동 생성해 주는 폴더입니다.
#
#
# python-automated-trading/
# ├─ .venv/
# ├─ backtest.py
# ├─ main.py
# └─ sample.json
# backtest.py 파일
# 주식 자동 매매 백테스트를 구현해 주세요.
# 주어진 sample.json 파일을 불러와서 백테스트를 진행해 주세요.
# JSON 데이터는 json 모듈의 json.load() 함수로 변환해 사용해 주세요.
# (자세한 설명은 아래에 있습니다.)

# 백테스트 단계마다 매매 신호와 수익률을 출력해 주세요.
# main.py 파일
# 1분에 한 번씩 주식의 현재가를 가져옵니다.
# 이동 평균값을 계산해서 매매 전략에 따라 전량 매수, 전량 매도를 합니다.
# 필요하다면 거래 성공 여부 등을 출력합니다.
# 필요하다면 수익률을 확인하기 위해서 현재 잔고의 총 평가금액을 출력합니다.
# sample.json 파일
# 백테스팅에 사용할 JSON 파일입니다.
#
# 한국투자증권 당일분봉조회 API에서 가져온 데이터들을 JSON 형식으로 저장한 것입니다.
# output2에 해당하는 값인데요. 데이터 값의 형식은 아래 표를 참고해 주세요.
#
# 속성명	설명
# stck_bsop_date	주식 영업 일자
# stck_cntg_hour	주식 체결 시간
# acml_tr_pbmn	누적 거래 대금
# stck_prpr	주식 현재가
# stck_oprc	주식 시가
# stck_hgpr	주식 최고가
# stck_lwpr	주식 최저가
# cntg_vol	체결 거래량
# [sample.json 다운로드]
#
# 가이드라인
# 1. 백테스트
# 먼저 이동 평균선을 계산하는 함수를 만들어 봅시다.
#
# 이동 평균선을 가지고 매매 신호를 판단하는 함수를 만들어 보세요.
#
# JSON 파일을 불러옵니다.
#
# open() 함수를 관련된 내용을 복습하고 싶으신 분들은 [파일 읽기 - 파이썬 응용하기] 레슨을 참고해 보세요.
#
#
# with open("파일 경로", "r") as f:
#     for line in f:
#         print(line)
# json.load() 함수로 JSON 데이터를 파이썬 사전으로 변환해서 사용할 수 있어요.
#
#
# import json
#
# data = None
# with open("sample.json", "r") as f:
#     data = json.load(f)
# print(data)
#
# 주어진 데이터에서 현재가만 가져와서 이동 평균선을 계산합니다.
#
# 이동 평균선 매매 전략을 실행합니다.
#
# 잔고 금액을 설정하고, 전략에 따라 매매를 진행하면서 각 단계의 수익률을 계산합니다.
#
# 2. 자동 매매 구현하기
# 우선 API로 현재 가격을 가져오는 함수를 작성해 보세요.
#
# while 반복문과 time 모듈의 sleep() 함수를 사용해서 1분마다 반복하는 코드를 작성합니다.
#
#
# from time import sleep
#
# while True:
#     # 1분마다 실행할 코드
#     sleep(60)
# 백테스트를 하면서 만들었던 함수들을 가져와서 자동 매매에 적용해 봅니다.
#
# 실제 API 리퀘스트를 보내는 함수를 작성해 보고, 이 함수를 while 반복문에 반영해 봅니다.