# 실습 설명
# 거스름돈을 계산하는 코드를 작성하려고 합니다.
# 예를 들어 33,000원짜리 물건을 사기 위해 100,000원을 냈다면
# 67,000원을 거슬러줘야 합니다.
#
# 각 지폐가 충분히 있다면 일반적으로 다음과 같이 거슬러 줍니다.
#
# 50,000원 지폐: 1장
# 10,000원 지폐: 1장
# 5,000원 지폐: 1장
# 1,000원 지폐: 2장
# 그 과정을 살펴보면 아래와 같습니다.
#
# 먼저 50,000원권 1장을 거슬러주면 67,000 - 50,000 = 17,000원이 남습니다.
# 남은 17,000원에 한해 10,000원권 1장을 거슬러주면 17,000 - 10,000 = 7,000원이 남습니다.
# 남은 7,000원에 한해 5,000원권 1장을 거슬러주면 2,000원이 남습니다.
# 남은 2,000원에 한해 1,000원권 2장을 거슬러주면 거스름돈을 다 돌려주게 됩니다.
# 이와 같은 방식으로 특정 가격의 물건을 사고, 금액을 지불했을 때
# '가장 적은 수'의 지폐를 거슬러 주는 calculate_change() 함수를 작성하려고 합니다.
# 이 함수는 지불한 금액을 나타내는 payment와 물건의 가격을 나타내는 cost를
# 파라미터로 받습니다. caculate_change() 함수를 완성해 주세요.

# 50000원 지폐: 1장
# 10000원 지폐: 1장
# 5000원 지폐: 1장
# 1000원 지폐: 2장
#
# 50000원 지폐: 2장
# 10000원 지폐: 2장
# 5000원 지폐: 0장
# 1000원 지폐: 2장

def calculate_change(payment, cost):
    change = payment - cost  # 거스름돈 총액

    fifty_thousand = change // 50000  # 50,000원 지폐
    ten_thousand = (change - 50000*fifty_thousand) // 10000  # 10,000원 지폐
    five_thousand = (change - ((10000*ten_thousand) + (50000*fifty_thousand))) // 5000  # 5,000원 지폐
    one_thousand = (change - ((10000*ten_thousand) + (50000*fifty_thousand) + (5000*five_thousand))) // 1000  # 1,000원 지폐

    print(f"50000원 지폐: {fifty_thousand}장")
    print(f"10000원 지폐: {ten_thousand}장")
    print(f"5000원 지폐: {five_thousand}장")
    print(f"1000원 지폐: {one_thousand}장")


# 테스트 코드
calculate_change(100000, 33000)
print()
calculate_change(500000, 378000)


# 해설
# 예시를 통해 아이디어를 얻어 봅시다. 33,000원 하는 물건을 사는데 100,000원을 받았다고 가정할게요.
# 그러면 67,000원을 거슬러 줘야 하는데, 어떻게 해야 최소한의 지폐 개수로 거슬러 줄 수 있을까요?
#
# 머리를 좀 굴려 보면 알 수 있는데요. 가장 큰 지폐부터 넣어 보면 됩니다.
# 그러니까 처음에는 50,000원 지폐 몇 장을 거슬러 줄 수 있는지 보는 거죠.
# 50,000원 지폐로 거슬러 주는 것이 다른 작은 지폐로 거슬러 주는 것보다 무조건 좋기 때문에, 50,000원 지폐부터 보는 것입니다.
# 그러면 50,000원부터 1,000원까지 순서대로 계산해 볼게요.
#
# 50,000원: 1장 (67,000원에는 50,000원이 한 번만 들어가기 때문에, 67,000원에서 50,000원을 뺀 17,000원이 남습니다.)
# 10,000원: 1장 (17,000원에 10,000원이 한 번 들어가기 때문에 17,000원에서 10,000원을 뺀 7,000원이 남습니다)
# 5,000원: 1장 (7,000원에 5,000원이 한 번 들어가므로 7,000원에서 5,000원을 뺀 2,000원이 남습니다.)
# 1,000원: 2장 (2,000원에 1,000원이 두 번 들어갑니다.)
# 결론적으로 지폐 종류별 거스름돈은 아래와 같습니다.
#
# 50,000원 1장
# 10,000원 1장
# 5,000원 1장
# 1,000원 2장
# 이제 우리가 생각한 내용을 코드로 옮겨 봅시다.

# 거스름돈 총액
# 우리가 거슬러 줘야 하는 총액은 얼마인가요?
# 받은 돈에서 물건 가격을 빼면 되겠죠?

# change = payment - cost  # 거스름돈 총액


# 거슬러 줘야 할 지폐 개수
# 67,000원을 거슬러 줘야 하면, 50,000원 지폐는 몇 장 주면 될까요? 67,000원에 50,000원이 몇 번 들어가는지 확인하면 되죠?
# 파이썬에서는 버림 나눗셈(//)을 사용하면 이를 알 수 있습니다.

# change // 50000  # 50,000원 지폐 개수


# 거슬러 주고 남은 금액
# 67,000원에서 50,000원으로 최대한 거슬러 주고 남은 금액은 17,000원입니다.
# 파이썬에서는 나머지 연산(%)을 사용하면 이를 알 수 있습니다.

# change % 50000  # 50,000원 지폐로 거슬러 주고 남은 금액

# 만약 50,000원과 10,000원을 최대한 거슬러 주고 남은 금액은 뭘까요?
# 단순하게 생각하면 change % 50000 % 10000인데요.
# 조금만 머리를 굴려 보면 이게 change % 10000과 같다는 걸 알 수 있습니다.
# 50,000은 10,000의 배수이기 때문이죠.
#
# 그럼 50,000원, 10,000원, 5,000원을 최대한 거슬러 주고 남은 금액은 어떻게 계산할까요?
# 단순하게 생각하면 change % 50000 % 10000 % 5000이지만, 그냥 간단하게 change % 5000만 해도 똑같은 결과가 나옵니다.
# 50,000과 10,000은 둘 다 5,000의 배수이기 때문입니다.

# 모범 답안
# def calculate_change(payment, cost):
#     change = payment - cost  # 거스름돈 총액
#
#     fifty_count = change // 50000  # 50,000원 지폐
#     ten_count = (change % 50000) // 10000  # 10,000원 지폐
#     five_count = (change % 10000) // 5000  # 5,000원 지폐
#     one_count = (change % 5000) // 1000  # 1,000원 지폐
#
#     # 답 출력
#     print("50000원 지폐: {}장".format(fifty_count))
#     print("10000원 지폐: {}장".format(ten_count))
#     print("5000원 지폐: {}장".format(five_count))
#     print("1000원 지폐: {}장".format(one_count))